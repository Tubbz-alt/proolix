; Дизассемблированный файл  cp  из пакета Proolix
;	комментарий (c) G.Shepelev

;	#include <prool.h>

;	#include <conf.c>
;	#include <limits.h>

;	#include <stdio.h>
;	#include <string.h>
;	#include <io.h>
;	#include <fcntl.h>

;  Стандартное начало программы.
; На стеке переданы параметры массива символьных строк!
 a0100:		jmp	a0104		; обход сигнатуры
 a0102		DB	0DEh,0ADh	; сигнатура Proolix'а
 a0104:		push	cs		;	никому не нужное здесь
 a0105:		pop	ax		;	сохранение значения сегмента
 a0106:		mov	[a0110],ax	;	в памяти программы
 a0109:		call	a0242		; вызов main
			; в ax возвращается код завершения...
 a010C:		jmp	dword ptr [000Ch] ; выход из программы - межсегментный
					; переход на вектор завершения из PSP
					; ( в книжке П.Нортона адрес другой! )

 a0110		DW	?		;	область хранения (cs)

;	void cp_help(void)
;	{
;	puts("Uses: cp [file1] [file2]");	выдать подсказку...
 a0112:		push	ds		; 1-й параметр сегмент текстовой строки
 a0113:		mov	ax,a034C	; смещение текстовой строки
					; "Uses: cp [file1] [file2]",0
 a0116:		push	ax		; 2-й параметр
 a0117:		call	a031C		; вызов puts
 a011A:		add	sp,4
;	}
 a011D:		ret


;	int copy(char *path1, char *path2)
	; подпрограмма буферизованного копирования из одного файла в другой
;	{int h1, h2, i1, i2; long n, m;
;	char buf [SECTOR_SIZE];
 a011E:		push	bp		; сохранение содержимого регистра bp
 a011F:		mov	bp,sp	; bp - указатель в стеке;
				; "сверху" - переданные функции параметры,
				; "снизу" - временные буфер и переменные.
 a0121:		sub	sp,210h	; резервирование буфера в 200h байт,
				; по 4 байта для n и m,
				; по 2 байта для h1, h2, i1 и i2

;	if((h1=open(path1,O_RDONLY))==-1) return -1;
;					открыть файл1 для чтения
 a0125:		mov	ax,1		; O_RDONLY
 a0128:		push	ax	; первый параметр на стек - атрибут доступа
 a0129:		push	ds	; второй параметр на стек - seg path1
 a012A:		push	[bp+4]	; второй параметр на стек - offset path1
 a012D:		call	a0328		; open
 a0130:		add	sp,6	; коррекция указателя стека

 a0133:		mov	[bp-210h],ax	; h1 = номер файла1
 a0137:		cmp	ax,-1		; == -1
 a013A:		jnz	a013F	; нет, продолжим...
 a013C:		jmp	a0235		; выход с признаком заверш. -1

;	if((h2=open(path2,O_WRONLY|O_CREAT|O_TRUNC))==-1)
		; открыть и усечь до 0-й длины (а если не существует - создать)
		; файл, открытый для записи

 a013F:		mov	ax,0302h	; O_WRONLY or O_CREAT or O_TRUNC
 a0142:		push	ax	; первый параметр на стек - атрибут доступа
 a0143:		push	ds	; второй параметр на стек - seg path2
 a0144:		push	[bp+6]	; второй параметр на стек - offset path2
 a0147:		call	a0328		; open
 a014A:		add	sp,6	; коррекция указателя стека

 a014D:		mov	[bp-20Eh],ax	; h2 = номер файла2
 a0151:		cmp	ax,-1		; == -1
 a0154:		jnz	a0162	; нет, продолжим...

;	 {close(h1); return -1;}
 a0156:		push	[bp-210h]	; h1 = номер файла1
 a015A:		call	a033A		; close
 a015D:		inc	sp	; коррекция указателя стека
 a015E:		inc	sp
 a015F:		jmp	a0235		; выход с признаком заверш. -1


;	while(1)	; почти бесконечный цикл чтения-записи секторов
;	  {
;	  if((n=read(h1,buf,SECTOR_SIZE))==-1) break;
			; чтение в буфер очередного сектора
 a0162:		xor	dx,dx
 a0164:		mov	ax,a0200	; dx ax = длина буфера (= длине сект.)
 a0167:		push	dx	; первый параметр на стек - старшее слово длины
 a0168:		push	ax	; первый параметр на стек - младшее слово длины
		; учитывая, что адресация к памяти в данной модели 16-битная,
		; очень сомнительно, чтобы старшее слово длины имело смысл...
 a0169:		push	ss	; второй параметр на стек - seg buf
 a016A:		lea	ax,[bp-200h]
 a016E:		push	ax	; второй параметр на стек - offset buf
 a016F:		push	[bp-210h] ; третий параметр на стек - h1
 a0173:		call	a032E		; read
 a0176:		add	sp,10	; коррекция указателя стека
 a0179:		mov	[bp-206h],dx	; n = число прочитанных байтов
 a017D:		mov	[bp-208h],ax

 a0181:		cmp	dx,-1	; == -1
 a0184:		jnz	a018B
 a0186:		cmp	ax,-1
 a0189:		jz	a01E4		; break		ошибка чтения

;	  if(n==0) {m=0; break;}	проверка конца файла
 a018B:		mov	ax,[bp-208h]
 a018F:		or	ax,[bp-206h] ; n == 0 ?
 a0193:		jnz	a01A3
 a0195:		mov	word ptr [bp-202h],0	; m = 0
 a019B:		mov	word ptr [bp-204h],0		; ничего не записано
 a01A1:		jmp	a01E4		; break		конец файла1

;	  if((m=write(h2,buf,n))==-1) break;
		; запись из буфера очередного сектора
 a01A3:		push	[bp-206h] ; первый параметр на стек - n
 a01A7:		push	[bp-208h]	; (число значащих байт в буфере)
		; учитывая, что адресация к памяти в данной модели 16-битная,
		; очень сомнительно, чтобы старшее слово длины имело смысл...
 a01AB:		push	ss	; второй параметр на стек - seg buf
 a01AC:		lea	ax,[bp-200h]
 a01B0:		push	ax	; второй параметр на стек - offset buf
 a01B1:		push	[bp-20Eh] ; третий параметр на стек - h2
 a01B5:		call	a0334	; write
 a01B8:		add	sp,10	; коррекция указателя стека
 a01BB:		mov	[bp-202h],dx	; m = число записанных байтов
 a01BF:		mov	[bp-204h],ax

 a01C3:		cmp	dx,-1	; == -1
 a01C6:		jnz	a01CD
 a01C8:		cmp	ax,-1
 a01CB:		jz	a01E4		; break		ошибка записи


;	  if (m!=n) break;		проверка правильности длины записи
 a01CD:		mov	dx,[bp-202h] ; m
 a01D1:		mov	ax,[bp-204h]	; число записанных байт
 a01D5:		cmp	dx,[bp-206h] ; == n	число прочитанных байт
 a01D9:		jnz	a01E4
 a01DB:		cmp	ax,[bp-208h]
 a01DF:		jnz	a01E4		; break		не удалось записать

;	  }
 a01E1:		jmp	a0162		; следующий сектор...

	; сюда попадаем когда файл скопирован или в случае ошибки
	; гораздо проще было бы иметь разные точки выхода или
	; формировать отдельный признак ошибки...
;	i1=close(h1);
 a01E4:		push	[bp-210h]	; h1 (номер файла1)
 a01E8:		call	a033A		; close
 a01EB:		inc	sp	; коррекция указателя стека
 a01EC:		inc	sp
 a01ED:		mov	[bp-20Ch],ax ; i1 - признак успешности закрытия файла1

;	i2=close(h2);
 a01F1:		push	[bp-20Eh]	; h2 (номер файла2)
 a01F5:		call	a033A		; close
 a01F8:		inc	sp	; коррекция указателя стека
 a01F9:		inc	sp
 a01FA:		mov	[bp-20Ah],ax ; i2 - признак успешности закрытия файла2

;	if (n==-1) return -1;
 a01FE:		cmp	word ptr [bp-206h],-1 ; n == -1
 a0203:		jnz	a020C
 a0205:		cmp	word ptr [bp-208h],-1
 a020A:		jz	a0235		; выход с признаком заверш. -1

;	if (m==-1) return -1;
 a020C:		cmp	word ptr [bp-202h],-1 ; m == -1
 a0211:		jnz	a021A
 a0213:		cmp	word ptr [bp-204h],-1
 a0218:		jz	a0235		; выход с признаком заверш. -1

;	if (m!=n)  return -1;
 a021A:		mov	dx,[bp-202h]	; m (число записанных байтов)
 a021E:		mov	ax,[bp-204h]
 a0222:		cmp	dx,[bp-206h]	; n (число прочитанных байтов)
 a0226:		jnz	a0235
 a0228:		cmp	ax,[bp-208h]
 a022C:		jnz	a0235		; выход с признаком заверш. -1

;	if (i1==-1) return -1;
 a022E:		cmp	word ptr [bp-20Ch],-1
				; i1 (признак успешности закрытия файла1)
 a0233:		jnz	a023A

;	=return -1
 a0235:		mov	ax,-1		; -1
 a0238:		jmp	a023E

;	return (i2);
 a023A:		mov	ax,[bp-20Ah] ; i2 (признак успешности закрытия файла2)
; гораздо компактнее было бы, если бы все проверки выполнялись на логических
; операциях в одной команде if...

;	}
;	выход из подпрограммы copy
 a023E:		mov	sp,bp		; исходное состояние стека
 a0240:		pop	bp		; восстановление содержимого bp
 a0241:		ret	

;	main(int argc, char *argv[] )	основная процедура
				; argc - число передаваемых строк символов
				; *argv - указатель на массив символов
;	{
;	int ii, j, n, Files=0;
;	char path[2][PATH_MAX];
 a0242:		push	bp		; сохранение содержимого регистра bp
 a0243:		mov	bp,sp	; bp - указатель в стеке;
				; "сверху" - переданные программе параметры,
				; "снизу" - временные буфер и переменные.
 a0245:		sub	sp,206h	; резервирование двойного буфера в 2*FFh байт,
				; по 2 байта для ii, j, n и Files

 a0249:		mov	word ptr [bp-200h],0	; Files=0
				; номер половинки буфера для имени файла
; можно было бы обойтись одним индексом ii...

;	argc--;
 a024F:		dec	word ptr [bp+4]		; argc=argc-1
				; (нулевую строку игнорируем)

;	ii=1;
 a0252:		mov	word ptr [bp-206h],1	; ii=1
				; номер строки массива (начали с первой строки)

;	do	; копирование текстовых строк из массива во временный буфер
		; (хотел бы я знать зачем...) и имитация обработки опций
;	  {
;	  if (argc)
 a0258:		cmp	word ptr [bp+4],0	; argc == 0
 a025C:		jz	a02C8		; нет строк для копирования в буфер...

;	    {
;	    if (argv[ii][0]=='-')	может признак опции?
 a025E:		mov	bx,[bp-206h]	; ii
 a0262:		shl	bx,1		; ii*2
 a0264:		add	bx,[bp+6]	; offset argv + ii*2
				; (адр. указателя на ii-ю строку символов)
 a0267:		mov	bx,[bx]		; указатель на 0-й символ ii-й строки
 a0269:		cmp	byte ptr [bx],2Dh	; == "-"
 a026C:		jnz	a029A	; else

;	      {			; реакция на опции
;	      n=(int)strlen(argv[ii]);
 a026E:		push	ds	; первый параметр на стек - seg argv[ii]
 a026F:		mov	bx,[bp-206h]	; ii
 a0273:		shl	bx,1		; ii*2
 a0275:		add	bx,[bp+6]	; offset argv + ii*2
 a0278:		push	[bx]	; первый параметр на стек - offset argv[ii]
 a027A:		call	a0346	; strlen
 a027D:		add	sp,4	; коррекция указателя стека
 a0280:		mov	[bp-202h],ax		; n=длина строки

;	      for (j=1;j<n;j++)
 a0284:		mov	word ptr [bp-204h],1	; j=1
 a028A:		mov	ax,[bp-204h]	; j
 a028E:		cmp	ax,[bp-202h]	; j<n
 a0292:		jge	a02C8	; >=

;	        switch (argv[ii][j])
;	          {
;	          case 'N':			никаких опций ;)
;	          default : cp_help();  return 1;
 a0294:		call	a0112		; выдать подсказку...
 a0297:		jmp	a0311		; return 1

;	          }

;	      }
;	    else
;	      {
;	      strcpy(path[Files++],argv[ii]);
	; копирование ii-й строки из массива в одну из половинок буфера,
	; счётчик Files корректируется для указания на следующую половинку
 a029A:		push	ds	; первый параметр seg arg[ii]
 a029B:		mov	bx,[bp-206h]	; ii
 a029F:		shl	bx,1		; ii*2
 a02A1:		add	bx,[bp+6]	; offset argv + ii*2
				; (адр. указателя на ii-ю строку символов)
 a02A4:		push	[bx]	; первый параметр offset argv[ii]
 a02A6:		push	ds	; второй параметр seg path[Files]
 a02A7:		mov	ax,[bp-200h]	; Files		0...1
 a02AB:		inc	word ptr [bp-200h] ; Files=Files+1
 a02AF:		mov	dx,0FFh	; длина половинки буфера path
 a02B2:		mul	dx	; ax=текущая начальная позиция в буфере
 a02B4:		lea	dx,[bp-1FEh] ; адрес начала path
 a02B8:		add	ax,dx	; смещение текущей позиции для записи в память
 a02BA:		push	ax	; второй параметр offset path[Files]
 a02BB:		call	a0340	; strcpy	копирование строки ASCIIZ
 a02BE:		add	sp,8	; коррекция указателя стека

;	      if (Files>2) {cp_help(); return 3;}
 a02C1:		cmp	word ptr [bp-200h],2
 a02C6:		jg	a02DF	; Files>2

;	      }
;	    }
;	  }
;	while (ii++<argc);	; обрабатываем все строки в массиве
 a02C8:		mov	ax,[bp-206h]	; ii
 a02CC:		inc	word ptr [bp-206h]	; ii=ii+1
 a02D0:		cmp	ax,[bp+4]	; ii == argc
 a02D3:		jge	a02D8	; >=
 a02D5:		jmp	a0258		; возврат на DO

;	if (Files<2) {cp_help(); return 3;}
	; проверка того, что были переданы оба имени файла (лишние игнорир.)
 a02D8:		cmp	word ptr [bp-200h],2
 a02DD:		jge	a02E7	; Files>=2	якобы OK

;	=cp_help();return 3
 a02DF:		call	a0112		; выдать подсказку...
 a02E2:		mov	ax,3
 a02E5:		jmp	a0318

;	if ((copy(path[0],path[1]))==-1)
	; копирование файла с проверкой успешности
 a02E7:		lea	ax,[bp-0FFh]
 a02EB:		push	ax	; первый параметр path[1]
 a02EC:		lea	ax,[bp-1FEh]
 a02F0:		push	ax	; второй параметр path[0]
 a02F1:		call	a011E	; подпрограмма copy
 a02F4:		add	sp,4	; коррекция указателя стека

 a02F7:		cmp	ax,-1	;	== -1
 a02FA:		jnz	a0316	; нет, наверное файл скопирован упешно...

;	  {
;	  printf("Can't copy %s to %s\n",path[0],path[1]);
 a02FC:		lea	ax,[bp-0FFh]
 a0300:		push	ax	; первый параметр - адрес path[1]
 a0301:		lea	ax,[bp-1FEh]
 a0305:		push	ax	; второй параметр - адрес path[0]

 a0306:		push	ds	; параметр seg строки
 a0307:		mov	ax,a0365	; смещение текстовой строки
					; "Can't copy %s to %s",0Ah,0
 a030A:		push	ax	; параметр offset строки
		; весьма занятный алгоритм передачи адресов текстовых строк,
		; некоторые дополняются значением сегмента, а другие нет...
	; А не лажа ли это???
 a030B:		call	a0322	; printf
 a030E:		add	sp,8	; коррекция указателя стека

;	  return 1;
 a0311:		mov	ax,1
 a0314:		jmp	a0318
;	  }

;	return 0;
 a0316:		xor	ax,ax

;	}
;	выход из подпрограммы main
 a0318:		mov	sp,bp		; исходное состояние стека
 a031A:		pop	bp		; восстановление содержимого bp
 a031B:		ret

;	=puts
 a031C:		mov	ax,7
 a031F:		int	84h
 a0321:		ret

;	=printf
 a0322:		mov	ax,10h
 a0325:		int	84h
 a0327:		ret

;	=open
 a0328:		mov	ax,24h
 a032B:		int	84h
 a032D:		ret

;	=read
 a032E:		mov	ax,26h
 a0331:		int	84h
 a0333:		ret

;	=write
 a0334:		mov	ax,27h
 a0337:		int	84h
 a0339:		ret

;	=close
 a033A:		mov	ax,28h
 a033D:		int	84h
 a033F:		ret

;	=strcpy
 a0340:		mov	ax,3Ch
 a0343:		int	84h
 a0345:		ret

;	=strlen
 a0346:		mov	ax,40h
 a0349:		int	84h
 a034B:		ret


 a034C		DB	"Uses: cp [file1] [file2]",0
 a0365		DB	"Can't copy %s to %s",0Ah,0
